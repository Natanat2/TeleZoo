import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '7408912366:AAGb0eztKX1Ez-BWZ-cm751SclPgKZpn6Go'

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
quiz_data = [
    {
        "question": "–ì–¥–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∂–∏—Ç—å?",
        "options": ["–í –≥—É—Å—Ç–æ–º –ª–µ—Å—É", "–ù–∞ –∂–∞—Ä–∫–æ–º –ø–æ–±–µ—Ä–µ–∂—å–µ", "–í –∑–∞—Å–Ω–µ–∂–µ–Ω–Ω—ã—Ö –≥–æ—Ä–∞—Ö", "–í –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–µ—Ç–µ"],
        "mapping": {
            "–í –≥—É—Å—Ç–æ–º –ª–µ—Å—É": "–õ–µ–≤",
            "–ù–∞ –∂–∞—Ä–∫–æ–º –ø–æ–±–µ—Ä–µ–∂—å–µ": "–§–ª–∞–º–∏–Ω–≥–æ",
            "–í –∑–∞—Å–Ω–µ–∂–µ–Ω–Ω—ã—Ö –≥–æ—Ä–∞—Ö": "–ë–µ–ª—ã–π –º–µ–¥–≤–µ–¥—å",
            "–í –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–µ—Ç–µ": "–ö—Ä—ã—Å–∞"
        }
    },
    # –î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã
]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command('start'))
async def start_command(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard = [
        [InlineKeyboardButton(text = "–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üß†", callback_data = "start_quiz")],
        [InlineKeyboardButton(text = "–û –∑–æ–æ–ø–∞—Ä–∫–µ üêæ", callback_data = "about_zoo")],
    ])
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –ó–æ–æ–ø–∞—Ä–∫–∞. üêæ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup = keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û –∑–æ–æ–ø–∞—Ä–∫–µ"
@dp.callback_query(lambda c: c.data == "about_zoo")
async def about_zoo(callback: CallbackQuery):
    text = "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –∑–æ–æ–ø–∞—Ä–∫..."
    await callback.message.answer(text)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"
@dp.callback_query(lambda c: c.data == "start_quiz")
async def start_quiz(callback: CallbackQuery):
    user_states[callback.from_user.id] = {"current_question": 0, "answers": []}
    await send_question(callback.from_user.id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async def send_question(user_id):
    state = user_states[user_id]
    question_data = quiz_data[state["current_question"]]
    keyboard = InlineKeyboardMarkup(
        inline_keyboard = [
            [InlineKeyboardButton(text = option, callback_data = f"quiz_option:{option}")]
            for option in question_data["options"]
        ]
    )
    await bot.send_message(
        chat_id = user_id,
        text = f"–í–æ–ø—Ä–æ—Å {state['current_question'] + 1}: {question_data['question']}",
        reply_markup = keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
@dp.callback_query(lambda c: c.data.startswith("quiz_option:"))
async def handle_quiz_answer(callback: CallbackQuery):
    user_id = callback.from_user.id
    state = user_states[user_id]
    question_data = quiz_data[state["current_question"]]
    selected_option = callback.data.split(":")[1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    state["answers"].append(selected_option)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
    state["current_question"] += 1
    if state["current_question"] < len(quiz_data):
        await send_question(user_id)
    else:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ
        animal_scores = {}
        for i, answer in enumerate(state["answers"]):
            mapping = quiz_data[i]["mapping"]
            animal = mapping[answer]
            animal_scores[animal] = animal_scores.get(animal, 0) + 1

        total_animal = max(animal_scores, key = animal_scores.get)

        animal_images = {
            "–õ–µ–≤": "https://storage.moscowzoo.ru/storage/647edc2a70bb5462366280fc/images/animals/fc387a69-37f8-4bbb-af2e-432a1a7a1640.jpeg",
            # –î—Ä—É–≥–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        }

        await callback.message.answer(f"–í–∞—à —Ç–æ—Ç–µ–º: {total_animal} üêæ")
        await bot.send_photo(
            chat_id = user_id,
            photo = animal_images[total_animal],
            caption = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! {total_animal} ‚Äî –≤–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ!"
        )

        del user_states[user_id]  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await callback.answer()


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
